---
title: "CITY SCAN: TUNIS, TUNISIA"
format: html

---

#### Import Modules

```{ojs}
// Import libraries explicitly
Plot = require("@observablehq/plot")
d3 = require("d3")
// Plot = require("@observablehq/plot@0.6.14")
// d3 = require("d3@7")
```

#### Data
```{ojs}
// load data as CSVs directly
pop_growth = FileAttachment("data/processed/pop_growth.csv").csv({typed: true})
pop_age_sex = FileAttachment("data/processed/pop_age_sex.csv").csv({typed: true})
uba = FileAttachment("data/processed/uba.csv").csv({typed: true})
lc = FileAttachment("data/processed/lc.csv").csv({typed: true})
pv = FileAttachment("data/processed/pv.csv").csv({typed: true}) //note: this placeholder pv data (actual data for Algiers PV - there is not data available for Tunis pv )
fu = FileAttachment("data/processed/fu.csv").csv({typed: true})
pu = FileAttachment("data/processed/pu.csv").csv({typed: true})
cu = FileAttachment("data/processed/cu.csv").csv({typed: true})
comb = FileAttachment("data/processed/comb.csv").csv({typed: true})
elevation = FileAttachment("data/processed/elevation.csv").csv({typed: true})
slope = FileAttachment("data/processed/slope.csv").csv({typed: true})
fwi = FileAttachment("data/processed/fwi.csv").csv({typed: true})
```
#### Variables
```{ojs}
// plotWidth variable to calculate responsive bar offests based on plot width for Population Distribution by Age & Sex
plotWidth = width * 0.95 // make width 95% of container/viewport

// barOffset variable to calculate responsive bar offests based on plot width for Population Distribution by Age & Sex
barOffset = Math.max(8, plotWidth / 120) // scales with width, minimum of 8 px

// donut chart dimensions
dimensions = ({
  width: width * 0.95, // make width 95% of container/viewport
  height: (width * 0.95) * 0.75, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio),
  margin: 140,
  radius: Math.min(600, 600) / 2 - 140
})

colorScale_lc = d3.scaleOrdinal()
  .domain(lc.map(d => d.category))
  .range([
    "#d3605f",  // for Built-up (10.98%)
    "#eaa86f",  // for Cropland (1.04%)
    "#9bbb7f",  // for Grassland (28.38%)
    "#629777",  // for Tree cover (39.24%)
    "#e2c985",  // for Shrubland (1.64%)
    "#b4ada4",  // for Bare/sparse vegetation (1.22%)
    "#61acdc",  // for Permanent water bodies (6.06%)
    "#979ec9",  // for Herbaceous wetland (4.58%)
    "#48d394",  // for Mangroves (6.86%)

  ])

colorScale_elevation = d3.scaleOrdinal()
  .domain(elevation.map(d => d.category))
  .range([
    "#f5c4c0",  // -5-40m (75.24%)
    "#fa9fb5",  // 40-90m (17.17%)
    "#f768a1",  // 90-135m (5.96%)
    "#c51b8a"   // remaining higher elevations (1.62%)
  ])

  colorScale_slope = d3.scaleOrdinal()
  .domain(slope.map(d => d.category))
  .range([
    "#ffffd4",  // for 0-2° slopes (77.92%)
    "#fed98e",  // for 2-5° slopes (14.38%)
    "#fe9929",  // for 5-10° slopes (5.66%)
    "#d95f0e",  // for 10-20° slopes (1.85%)
    "#993404"   // for 20°+ slopes (0.19, the unlabeled remainder)
  ])

  pieGenerator = d3.pie()
  .value(d => d.percentage)
  .sort(null)

  arcGenerator = d3.arc()
  .innerRadius(dimensions.radius * 0.50)
  .outerRadius(dimensions.radius)
```

## POPULATION AND DEMOGRAPHIC TRENDS
### POPULATION GROWTH & DENSITY

```{ojs}
// population growth chart with Plot
chart_pop_growth= Plot.plot({
  width: width * 0.95, // make width 95% of container/viewport
  height: (width * 0.95) * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio)
  marginLeft: 50,
  marginRight: 30,
  marginTop: 30,
  marginBottom: 40,
  title: "Tunis Population Growth, 2000-2021",
  y: {
    grid: true,
    label: "Population",
    // tickformat as function to avoid syntax issues
    tickFormat: d => {
      if (d === 0) return "0";
      if (d === 100000) return "100K";
      if (d === 200000) return "200K";
      if (d === 300000) return "300K";
      if (d === 400000) return "400K";
      if (d === 500000) return "500K";
      if (d === 600000) return "600K";
      if (d === 700000) return "700K";
      if (d === 800000) return "800K";
      if (d === 900000) return "900K";
      if (d === 1000000) return "1M";
      if (d === 1100000) return "1.1M";
      if (d === 1200000) return "1.2M";
      if (d === 1300000) return "1.3M";
      if (d === 1400000) return "1.4M";
      if (d === 1500000) return "1.5M";
      if (d === 1600000) return "1.6M";
      if (d === 1700000) return "1.7M";
      if (d === 1800000) return "1.8M";
      if (d === 1900000) return "1.9M";
      if (d === 2000000) return "2M";
      if (d === 2100000) return "2.1M";
      if (d === 2200000) return "2.2M";
      if (d === 2300000) return "2.3M";
      if (d === 2400000) return "2.4M";
      if (d === 2500000) return "2.5M";
      if (d === 2600000) return "2.6M";
      if (d === 2700000) return "2.7M";
      if (d === 2800000) return "2.8M";
      if (d === 2900000) return "2.9M";
      if (d === 3000000) return "3M";
      if (d === 3100000) return "3.1M";
      if (d === 3200000) return "3.2M";
      if (d === 3300000) return "3.3M";
      if (d === 3400000) return "3.4M";
      if (d === 3500000) return "3.5M";
      if (d === 3600000) return "3.6M";
      if (d === 3700000) return "3.7M";
      if (d === 3800000) return "3.8M";
      if (d === 3900000) return "3.9M";
      if (d === 4000000) return "4M";
      if (d === 4100000) return "4.1M";
      if (d === 4200000) return "4.2M";
      if (d === 4300000) return "4.3M";
      if (d === 4400000) return "4.4M";
      if (d === 4500000) return "4.5M";
      if (d === 4600000) return "4.6M";
      if (d === 4700000) return "4.7M";
      if (d === 4800000) return "4.8M";
      if (d === 4900000) return "4.9M";
      if (d === 5000000) return "5M";
      return d;
    },
    domain: [0, Math.max(...pop_growth.map(d => d.population)) * 1.5]
  },
  x: {
    label: "Year",
    tickFormat: "d",
    ticks: 5
  },
  marks: [
    Plot.line(pop_growth, {
      x: "year", 
      y: "population",
      stroke: "black",
      strokeWidth: 1.5
    }),
    
    Plot.dot(pop_growth, {
      x: "year", 
      y: "population",
      fill: "black",
      r: 3, // dot size
      title: d => `Year: ${d.year}\nPopulation: ${d.population.toLocaleString()}`,
      tip: true
    })
  ]
})
```

### POPULATION DISTRIBUTION BY AGE & SEX

```{ojs}
chart_pop_age_sex = Plot.plot({
  title: "Population distribution in Tunis by sex",
  width: plotWidth,
  height: plotWidth * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio),
  marginBottom: 100,
  x: {
    label: null,
    tickRotate: -45,
    paddingOuter: 1.3,
    paddingInner: .6,
    domain: [
      "0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", 
      "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", 
      "65-69", "70-74", "75-79", "80+"
    ]
  },
  y: {
    label: "Percentage of Age Distribution",
    domain: [0, 6],
    grid: true
  },
  color: {
    domain: ["female", "male"],
    range: ["#f05f5c", "#00b4b7"],
    legend: true
  },
  marks: [
    // female bars left with tooltips
    Plot.barY(
      pop_age_sex.filter(d => d.sex === "female"),
      {
        x: d => d.ageBracket,
        y: "percentage",
        fill: "#f05f5c",
        dx: -barOffset, // responsive bar offset to the left
        width: barOffset * 1.5, // responsive bar width
        title: d => `Age: ${d.ageBracket}
Sex: ${d.sex}
Percentage: ${d.percentage.toFixed(2)}%
Population: ${d.count.toLocaleString()}`,
        tip: { anchor: "right", dx: 0 }
      }
    ),
    
    // male bars right with tooltips
    Plot.barY(
      pop_age_sex.filter(d => d.sex === "male"),
      {
        x: d => d.ageBracket,
        y: "percentage",
        fill: "#00b4b7",
        dx: barOffset, // responsive bar offset to the right
        width: barOffset * 1.5, // responsive bar width
        title: d => `Age: ${d.ageBracket}
Sex: ${d.sex}
Percentage: ${d.percentage.toFixed(2)}%
Population: ${d.count.toLocaleString()}`,
        tip: { anchor: "left", dx: 0 }
      }
    ),
    
    Plot.ruleY([0])
  ]
})
```

## BUILT FORM
### URBAN EXTENT AND CHANGE

```{ojs}
chart_uba = Plot.plot({
  title: "Urban Built-up Area, 1985-2015",
  width: width * 0.95, // make width 95% of container/viewport
  height: (width * 0.95) * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio)
  marginLeft: 60,
  marginBottom: 40,
  x: {
    label: null,
    tickFormat: d => d3.format("d")(uba[d-1].yearName), // format as integer with no commas
    domain: [1, 31],
    ticks: Math.max(5, Math.min(15, Math.floor(width / 80))), // dynamic ticks based on width - gives 5-15 ticks based on available width (roughly 1 tick per 80 pixels) 
    //d3.range(1, 32),
    grid: true
  },
  y: {
    label: "Urban built-up area (sq km)",
    domain: [0,350],
    grid: true
  },
  marks: [
    Plot.line(uba, {
      x: "year",
      y: "uba",
      stroke: "black",
      strokeWidth: 2
    }),
    Plot.dot(uba, {
      x: "year",
      y: "uba",
      fill: "black",
      r: 4,
      title: d => `Year: ${d.yearName}
Urban Built-up Area: ${d.uba} sq km`,
      tip: true //tip: { anchor: "right", dx: 0 }
      }
    ),
  ]
})
```

### LAND COVER

```{ojs}
legend_lc = {
  const svg = d3.create("svg")
    .attr("width", 200)
    .attr("height", 260);
    
  const legendGroup = svg.append("g")
    .attr("transform", "translate(20, 20)");

  // title
  legendGroup.append("text")
    .attr("x", 0)
    .attr("y", 0)
    .attr("font-weight", "bold")
    .attr("font-size", "14px")
    .text("Land Cover");

  legendGroup.append("text")
    .attr("x", 0)
    .attr("y", 20)
    .attr("font-style", "italic")
    .attr("font-size", "12px")
    .text("Land cover type");

  const data = [
    { range: "Grassland", color: "#9bbb7f" },
    { range: "Tree cover", color: "#629777" },
    { range: "Shrubland", color: "#e2c985" },
    { range: "Cropland", color: "#eaa86f" },
    { range: "Bare/sparse vegetation", color: "#b4ada4" },  
    { range: "Permanent water bodies", color: "#61acdc" },
    { range: "Herbaceous wetland", color: "#979ec9" },
    { range: "Mangroves", color: "#48d394" },
    { range: "Built-up", color: "#d3605f" },
  ];

  const legendEntries = legendGroup.selectAll(".legend-entry")
    .data(data)
    .join("g")
    .attr("class", "legend-entry")
    .attr("transform", (d, i) => `translate(0, ${i * 25 + 40})`);

  // colored rectangles
  legendEntries.append("rect")
    .attr("width", 15)
    .attr("height", 15)
    .attr("fill", d => d.color);

  // text labels
  legendEntries.append("text")
    .attr("x", 25)
    .attr("y", 12)
    .text(d => d.range)
    .style("font-size", "12px")
    .style("font-family", "Arial");

  return svg.node();
}

chart_lc = {
  const svg = d3.create("svg")
    .attr("width", dimensions.width)
    .attr("height", dimensions.height)
    .attr("viewBox", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);

  const arcs = svg.append("g")
    .selectAll("path")
    .data(pieGenerator(lc))
    .join("path")
      .attr("fill", d => colorScale_lc(d.data.lcType))
      .attr("stroke", "white")        // add white stroke
      .attr("stroke-width", "2px")    // set stroke width
      .attr("d", arcGenerator);

  const labels = svg.append("g")
    .selectAll("text")
    .data(pieGenerator(lc))
    .join("text")
      .attr("transform", d => `translate(${arcGenerator.centroid(d)})`)
      .attr("dy", "0.35em")
      .attr("text-anchor", "middle")
      .style("font-size", "16px")
      .style("fill", "black")
      .text(d => d.data.percentage > 2.5 ? `${d.data.percentage}%` : "");

  return svg.node();
}
```

## CLIMATE CONDITIONS
### PHOTOVOLTAIC POWER POTENTIAL
```{ojs}
chart_pv = Plot.plot({
  title: "Seasonal availability of solar energy",
  width: width * 0.95, // make width 95% of container/viewport,
  height: (width * 0.95) * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ration); 0.75 = more square (1.33:1 ratio),
  marginLeft: 60,
  marginBottom: 40,
  x: {
    label: null,
    tickFormat: d => pv [d-1].monthName,
    domain: [1, 12],
    ticks: Math.max(5, Math.min(15, Math.floor(width / 80))), // dynamic ticks based on width - gives 5-15 ticks based on available width (roughly 1 tick per 80 pixels)
    //d3.range(1, 13),
    grid: true
  },
  y: {
    label: "Daily PV energy yield (kWh/kWp)",
    domain: [2.5, 5.5],
    grid: true
  },
  marks: [
    Plot.line(pv, {
      x: "month",
      y: "maxPv",
      stroke: "black",
      strokeWidth: 2
    }),
    Plot.dot(pv, {
      x: "month",
      y: "maxPv",
      fill: "black",
      r: 4,
      title: d => `Month: ${d.monthName}
Daily PV energy yield: ${d.maxPv} kWh/kWp`,
      tip: true
      }
    ),
    // horizontal dashed lines
    Plot.ruleY([4.5], {
      stroke: "gray",
      strokeWidth: 1.5,
      strokeDasharray: "5,5"
    }),
    Plot.ruleY([3.5], {
      stroke: "gray",
      strokeWidth: 1.5,
      strokeDasharray: "5,5"
    }),
    // annotations
    Plot.text(
      ["Excellent Conditions"], 
      {
        x: 6,
        y: 4.7,
        dy: -5,
        textAnchor: "middle",
        fontWeight: "bold",
        fontSize: 14,
        fill: "gray"
      }
    ),
    Plot.text(
      ["Favorable Conditions"], 
      {
        x: 6,
        y: 3.7,
        dy: -5,
        textAnchor: "middle",
        fontWeight: "bold",
        fontSize: 14,
        fill: "gray"
      }
    )
  ]
})
```
## RISK IDENTIFICATION
### URBAN BUILT-UP AREA EXPOSED TO RIVER FLOODING

```{ojs}
chart_fu = Plot.plot({
  title: "Built-up Area exposed to fluvial flooding",
  width: width * 0.95, // make width 95% of container/viewport
  height: (width * 0.95) * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio),
  marginLeft: 60,
  marginBottom: 40,
  x: {
    label: null,
    tickFormat: d => d3.format("d")(fu[d-1].yearName),
    domain: [1, 31],
    ticks: Math.max(5, Math.min(15, Math.floor(width / 80))), // dynamic ticks based on width - gives 5-15 ticks based on available width (roughly 1 tick per 80 pixels) 
      //d3.range(1, 32),
    grid: true
  },
  y: {
    label: "Exposed urban built-up area (sq km)",
    domain: [0, 10],
    grid: true
  },
  marks: [
    Plot.line(fu, {
      x: "year",
      y: "fu",
      stroke: "black",
      strokeWidth: 2,
      title: d => `Year: ${d.yearName}
Built-up Area Exposed: ${d.fu.toFixed(2)} sq km`,
      tip: true
    })
  ]
})
```

### URBAN BUILT-UP AREA EXPOSED TO RAINWATER FLOODING

```{ojs}
chart_pu = Plot.plot({
  title: "Built-up Area exposed to pluvial flooding",
  width: width * 0.95,
  height: (width * 0.95) * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio),
  marginLeft: 60,
  marginBottom: 40,
  x: {
    label: null,
    tickFormat: d => d3.format("d")(pu[d-1].yearName),
    domain: [1, 31],
    ticks: Math.max(5, Math.min(15, Math.floor(width / 80))), // dynamic ticks based on width - gives 5-15 ticks based on available width (roughly 1 tick per 80 pixels) 
    // d3.range(1, 32),
    grid: true
  },
  y: {
    label: "Exposed urban built-up area (sq km)",
    domain: [0, 100],
    grid: true
  },
  marks: [
    Plot.line(pu, {
      x: "year",
      y: "pu",
      stroke: "black",
      strokeWidth: 2,
      title: d => `Year: ${d.yearName}
Built-up Area Exposed: ${d.pu.toFixed(2)} sq km`,
      tip: true
    })
  ]
})
```
### URBAN BUILT-UP AREA EXPOSED TO COASTAL FLOODING

```{ojs}
chart_cu = Plot.plot({
  title: "Built-up Area exposed to coastal flooding",
  width: width * 0.95, // make width 95% of container/viewport,
  height: (width * 0.95) * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio),
  marginLeft: 60,
  marginBottom: 40,
  x: {
    label: null,
    tickFormat: d => d3.format("d")(cu[d-1].yearName),
    domain: [1, 31],
    ticks: Math.max(5, Math.min(15, Math.floor(width / 80))), // dynamic ticks based on width - gives 5-15 ticks based on available width (roughly 1 tick per 80 pixels) 
    // d3.range(1, 32),
    grid: true
  },
  y: {
    label: "Exposed urban built-up area (sq km)",
    domain: [0, 10],
    grid: true
  },
  marks: [
    Plot.line(cu, {
      x: "year",
      y: "cu",
      stroke: "black",
      strokeWidth: 2,
      title: d => `Year: ${d.yearName}
Built-up Area Exposed: ${d.cu.toFixed(2)} sq km`,
      tip: true
    })
  ]
})
```
### URBAN BUILT-UP AREA EXPOSED TO COMBINED FLOODING

```{ojs}
chart_comb = Plot.plot({
  title: "Built-up Area exposed to combined flooding ",
  width: width * 0.95, // make width 95% of container/viewport,
  height: (width * 0.95) * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio),
  marginLeft: 60,
  marginBottom: 40,
  x: {
    label: null,
    tickFormat: d => d3.format("d")(comb[d-1].yearName), // format tick labels as integer with no commas 
    domain: [1, 31],
    ticks: Math.max(5, Math.min(15, Math.floor(width / 80))), // dynamic ticks based on width - gives 5-15 ticks based on available width (roughly 1 tick per 80 pixels) 
    // d3.range(1, 32, 5), // only show ticks for every 5 years 
    //tickSpacing: 5 // increase spacing between ticks
    grid: true
  },
  y: {
    label: "Area (sq km)",
    domain: [0, 100],
    grid: true
  },
  marks: [
    // lines without tooltips
    Plot.line(comb, {
      x: "year",
      y: "comb",
      stroke: "black",
      strokeWidth: 2
    }),
    Plot.line(pu, {
      x: "year",
      y: "pu",
      stroke: "#619cfe",
      strokeWidth: 2,
      strokeDasharray: "4,4"
    }),
    Plot.line(fu, {
      x: "year",
      y: "fu",
      stroke: "#f8766d",
      strokeWidth: 2,
      strokeDasharray: "4,4"
    }),
    Plot.line(cu, {
      x: "year",
      y: "cu",
      stroke: "#02b939",
      strokeWidth: 2,
      strokeDasharray: "4,4"
    }),
    
    // invisible vertical rule for unified tooltip
    Plot.ruleX(comb, {
      x: "year",
      y1: "comb",
      y2: d => d.comb + 5,
      stroke: "transparent",
      strokeWidth: 10,
      title: d => {
        // find corresponding values for this year in all datasets
        const puValue = pu.find(p => p.year === d.year)?.pu || 0;
        const fuValue = fu.find(f => f.year === d.year)?.fu || 0;
        const cuValue = cu.find(c => c.year === d.year)?.cu || 0;
        
        return `Year: ${d.yearName}
━━━━━━━━━━━━
Combined: ${d.comb} sq km

Pluvial: ${puValue.toFixed(1)} sq km  
Fluvial: ${fuValue.toFixed(1)} sq km
Coastal: ${cuValue.toFixed(1)} sq km`;
      },
      tip: true
    }),
   ],
  // legend
  color: {
    legend: true,
    domain: ["Combined", "River", "Rainwater", "Coastal"],
    range: ["black", "#f8766d", "#619cfe", "#02b939"]
  }
})
```
### ELEVATION

```{ojs}
legend_elevation = {
  const svg = d3.create("svg")
    .attr("width", 200)
    .attr("height", 180);
    
  const legendGroup = svg.append("g")
    .attr("transform", "translate(20, 20)");

  // title
  legendGroup.append("text")
    .attr("x", 0)
    .attr("y", 0)
    .attr("font-weight", "bold")
    .attr("font-size", "14px")
    .text("Elevation");

  legendGroup.append("text")
    .attr("x", 0)
    .attr("y", 20)
    .attr("font-style", "italic")
    .attr("font-size", "12px")
    .text("Meters above sea level (MASL)");

  const data = [
    { range: "-5-40", color: "#f5c4c0" },
    { range: "40-90", color: "#fa9fb5" },
    { range: "90-135", color: "#f768a1" },
    { range: "135+", color: "#c51b8a" }
    //{ range: "135-235", color: "#980043" }
  ];

  const legendEntries = legendGroup.selectAll(".legend-entry")
    .data(data)
    .join("g")
    .attr("class", "legend-entry")
    .attr("transform", (d, i) => `translate(0, ${i * 25 + 40})`);

  // colored rectangles
  legendEntries.append("rect")
    .attr("width", 15)
    .attr("height", 15)
    .attr("fill", d => d.color);

  // text labels
  legendEntries.append("text")
    .attr("x", 25)
    .attr("y", 12)
    .text(d => d.range)
    .style("font-size", "12px")
    .style("font-family", "Arial");

  return svg.node();
}

chart_elevation = {
  const svg = d3.create("svg")
    .attr("width", dimensions.width)
    .attr("height", dimensions.height)
    .attr("viewBox", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);

  const arcs = svg.append("g")
    .selectAll("path")
    .data(pieGenerator(elevation))
    .join("path")
      .attr("fill", d => colorScale_elevation(d.data.bin))
      .attr("stroke", "white")        // add white stroke
      .attr("stroke-width", "2px")    // set stroke width
      .attr("d", arcGenerator);

  const labels = svg.append("g")
    .selectAll("text")
    .data(pieGenerator(elevation))
    .join("text")
      .attr("transform", d => `translate(${arcGenerator.centroid(d)})`)
      .attr("dy", "0.35em")
      .attr("text-anchor", "middle")
      .style("font-size", "16px")
      .style("fill", "black")
      .text(d => d.data.percentage > 1.5 ? `${d.data.percentage}%` : "");

  return svg.node();
}
```

### SLOPE
```{ojs}
legend_slope = {
  const svg = d3.create("svg")
    .attr("width", 200)
    .attr("height", 180);
    
  const legendGroup = svg.append("g")
    .attr("transform", "translate(20, 20)");

  // title
  legendGroup.append("text")
    .attr("x", 0)
    .attr("y", 0)
    .attr("font-weight", "bold")
    .attr("font-size", "14px")
    .text("Slope");

  legendGroup.append("text")
    .attr("x", 0)
    .attr("y", 20)
    .attr("font-style", "italic")
    .attr("font-size", "12px")
    .text("Angle of hillside in degrees");

  const data = [
    { range: "0-2", color: "#ffffd4" },
    { range: "2-5", color: "#fed98e" },
    { range: "5-10", color: "#fe9929" },
    { range: "10-20", color: "#d95f0e" },
    { range: "20+", color: "#993404" }
  ];

  const legendEntries = legendGroup.selectAll(".legend-entry")
    .data(data)
    .join("g")
    .attr("class", "legend-entry")
    .attr("transform", (d, i) => `translate(0, ${i * 25 + 40})`);

  // colored rectangles
  legendEntries.append("rect")
    .attr("width", 15)
    .attr("height", 15)
    .attr("fill", d => d.color);

  // text labels
  legendEntries.append("text")
    .attr("x", 25)
    .attr("y", 12)
    .text(d => d.range)
    .style("font-size", "12px")
    .style("font-family", "Arial");

  return svg.node();
}

chart_slope = {
  const svg = d3.create("svg")
    .attr("width", dimensions.width)
    .attr("height", dimensions.height)
    .attr("viewBox", [-dimensions.width / 2, -dimensions.height / 2, dimensions.width, dimensions.height]);

  const arcs = svg.append("g")
    .selectAll("path")
    .data(pieGenerator(slope))
    .join("path")
      .attr("fill", d => colorScale_slope(d.data.bin))
      .attr("stroke", "white")        // add white stroke
      .attr("stroke-width", "2px")    // set stroke width
      .attr("d", arcGenerator);

  const labels = svg.append("g")
    .selectAll("text")
    .data(pieGenerator(slope))
    .join("text")
      .attr("transform", d => `translate(${arcGenerator.centroid(d)})`)
      .attr("dy", "0.35em")
      .attr("text-anchor", "middle")
      .style("font-size", "16px")
      .style("fill", "black")
      .text(d => d.data.percentage > 2 ? `${d.data.percentage}%` : "");

  return svg.node();
}
```

### HISTORICAL BURNT AREA & FIRE WEATHER INDEX
```{ojs}
chart_fwi = Plot.plot({
  title: "FWI in Tunis 2016-2021",
  width: width * 0.95, // make width 95% of container/viewport
  height: (width * 0.95) * 0.6, // maintains a 1.67:1 aspect ratio (width: height), note: 0.5 = wider chart (2:1 ratio); 0.75 = more square (1.33:1 ratio)
  marginLeft: 60,
  marginBottom: 40,
  x: {
    label: null,
    // show ticks for first occurrence of each month
    tickFormat: (d, i) => {
      const currentMonth = fwi[d-1].monthName;
      const prevMonth = d > 1 ? fwi[d-2].monthName : null;
      return currentMonth !== prevMonth ? currentMonth : "";
    },
    domain: [1, 53],
    // only include first week of each month
    ticks: d3.range(1, 53).filter(week => {
      const currentMonth = fwi[week-1].monthName;
      const prevMonth = week > 1 ? fwi[week-2].monthName : null;
      return currentMonth !== prevMonth;
    }),
    grid: true
  },
  y: {
    label: "95th Percentile FWI",
    domain: [0, 120],
    grid: true
  },
  marks: [
    Plot.line(fwi, {
      x: d => d.week,
      y: d => d.fwi,
      stroke: "black",
      strokeWidth: 2,
      title: d => `Month: ${d.monthName}
FWI: ${d.fwi.toFixed(2)}`,
      tip: true
    })
  ]
});
```





